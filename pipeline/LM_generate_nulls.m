% -------------------------------------------------------------------------
% LM_GENERATE_NULLS pulls the (nM motifs) x (nL logic gates) models for
% a given stimulus and parameter pair and randomly samples 100 null models.
%
% This function uses simulations data to compile all the time courses for
% (nL logic gates) x (nM motifs) for a given parameter A and B pair
% and stimulus type. Null models are generated by randomly sampling across
% all configurations for a given time point and node.
% -------------------------------------------------------------------------

function output = LM_generate_nulls(INDEX, SUFFIX)

SETTINGS = LM_SETTINGS();
nL = SETTINGS.nLogics; % number of logic gates
nM = SETTINGS.nMotifs; % number of motifs
nP = SETTINGS.nParams; % number of parameters
nN = SETTINGS.nNoises; % number of noise variations
nS = SETTINGS.nStims;  % number of stimulation types
N = SETTINGS.nNulls;

% Simulation data.
d = load([SETTINGS.filePath 'Simulations_FULL_S' num2str(INDEX) SUFFIX '.mat']);

nRows = 5; % number of nodes
nCols = length(SETTINGS.timePoints); % number of columns
[X, Y] = meshgrid(1:nRows, 1:nCols); % indexing along first two dimensions

% Setup parallelization.
samples = cell(nN, nP, nP);

parfor iParamA = 1:nP
    LOCAL = LM_SETTINGS();
    
    for iNoise = 1:nN
        noise = LOCAL.noiseNames{iNoise};
        
        for iParamB = 1:nP
            fprintf('Generating nulls for STIM[%d] N[%d] PA[%d] PB[%d]\n', ...
                INDEX, iNoise, iParamA, iParamB);
            compiledSamples = zeros(nRows, nCols, nL*nM);
            nullSamples = cell(1, N);

            % Compile all samples from motifs and logic gates
            for iMotif = 1:nM
                for iLogic = 1:nL
                    index = iMotif + (iLogic - 1)*nL;
                    compiledSamples(:,:,index) = d.(noise){iMotif, iLogic}{iParamA, iParamB};
                end
            end

            % Randomly select null models from compiled samples.
            for i = 1:N
                rng((iParamA - 1)*nP*N*nS + (iParamB - 1)*N*nS + (INDEX - 1)*N + i); % set seed
                inds = randi(nL*nM, nRows, nCols); % random indices
                linInds = sub2ind([nRows, nCols, nL*nM], X', Y', inds); % linear index
                nullSamples{i} = compiledSamples(linInds); % sample from all configurations for simulated
            end

            % Append to full matrix.
            samples{iNoise, iParamA, iParamB} = nullSamples;
        end
    end
end

% Organize simulations by noise.
for iNoise = 1:nN
    noise = SETTINGS.noiseNames{iNoise};
    output.(noise) = cell(nP,nP);
    output.(noise)(:,:) = samples(iNoise,:,:);
end

end